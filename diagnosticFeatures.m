function [featureTable,outputTable] = diagnosticFeatures(inputData)
%DIAGNOSTICFEATURES recreates results in Diagnostic Feature Designer.
%
% Input:
%  inputData: A table or a cell array of tables/matrices containing the
%  data as those imported into the app.
%
% Output:
%  featureTable: A table containing all features and condition variables.
%  outputTable: A table containing the computation results.
%
% This function computes spectra:
%  Case_ps/SpectrumData
%  Case_ps_3/SpectrumData
%  Case_ps_7/SpectrumData
%
% This function computes features:
%  Case_ps_spec/PeakAmp2
%  Case_ps_3_spec/PeakAmp2
%  Case_ps_7_spec/PeakAmp2
%  Case_sigstats/Kurtosis
%  Case_sigstats/PeakValue
%  Case_sigstats/SINAD
%  Case_sigstats_1/Kurtosis
%  Case_sigstats_1/PeakValue
%  Case_sigstats_1/SINAD
%  Case_sigstats_2/Kurtosis
%  Case_sigstats_2/PeakValue
%  Case_sigstats_3/PeakValue
%  Case_sigstats_4/Kurtosis
%  Case_sigstats_4/PeakValue
%  Case_sigstats_4/SINAD
%  Case_sigstats_5/PeakValue
%  Case_sigstats_6/PeakValue
%
% Frame Policy:
%  Frame name: FRM_1
%  Frame size: 0.064 seconds
%  Frame rate: 0.064 seconds
%
% Organization of the function:
% 1. Compute signals/spectra/features
% 2. Extract computed features into a table
%
% Modify the function to add or remove data processing, feature generation
% or ranking operations.

% Auto-generated by MATLAB on 08-Feb-2024 17:09:23

% Create output ensemble.
outputEnsemble = workspaceEnsemble(inputData,'DataVariables',"Case",'ConditionVariables',"Task2");

% Reset the ensemble to read from the beginning of the ensemble.
reset(outputEnsemble);

% Append new frame policy name to DataVariables.
outputEnsemble.DataVariables = [outputEnsemble.DataVariables;"FRM_1"];

% Set SelectedVariables to select variables to read from the ensemble.
outputEnsemble.SelectedVariables = "Case";

% Loop through all ensemble members to read and write data.
while hasdata(outputEnsemble)
    % Read one member.
    member = read(outputEnsemble);

    % Read signals.
    Case_full = readMemberData(member,"Case",["TIME","P1","P4","P7","P2","P3","P5","P6"]);

    % Get the frame intervals.
    lowerBound = Case_full.TIME(1);
    upperBound = Case_full.TIME(end);
    fullIntervals = frameintervals([lowerBound upperBound],0.064,0.064,'FrameUnit',"seconds");
    intervals = fullIntervals;

    % Initialize a table to store frame results.
    frames = table;

    % Loop through all frame intervals and compute results.
    for ct = 1:height(intervals)
        % Get all input variables.
        Case = Case_full(Case_full.TIME>=intervals{ct,1}&Case_full.TIME<intervals{ct,2},:);

        % Initialize a table to store results for one frame interval.
        frame = intervals(ct,:);

        %% PowerSpectrum
        try
            % Get units to use in computed spectrum.
            tuReal = "seconds";
            tuTime = tuReal;

            % Compute effective sampling rate.
            tNumeric = time2num(Case.TIME,tuReal);
            [Fs,irregular] = effectivefs(tNumeric);
            Ts = 1/Fs;

            % Resample non-uniform signals.
            x_raw = Case.P1;
            if irregular
                x = resample(x_raw,tNumeric,Fs,'linear');
            else
                x = x_raw;
            end

            % Compute the autoregressive model.
            data = iddata(x,[],Ts,'TimeUnit',tuTime,'OutputName','SpectrumData');
            arOpt = arOptions('Approach','fb','Window','now','EstimateCovariance',false);
            model = ar(data,10,arOpt);

            % Compute the power spectrum.
            [ps,w] = spectrum(model);
            ps = reshape(ps, numel(ps), 1);

            % Convert frequency unit.
            factor = funitconv('rad/TimeUnit', 'Hz', 'seconds');
            w = factor*w;
            Fs = 2*pi*factor*Fs;

            % Remove frequencies above Nyquist frequency.
            I = w<=(Fs/2+1e4*eps);
            w = w(I);
            ps = ps(I);

            % Configure the computed spectrum.
            ps = table(w, ps, 'VariableNames', {'Frequency', 'SpectrumData'});
            ps.Properties.VariableUnits = {'Hz', ''};
            ps = addprop(ps, {'SampleFrequency'}, {'table'});
            ps.Properties.CustomProperties.SampleFrequency = Fs;
            Case_ps = ps;
        catch
            Case_ps = table(NaN, NaN, 'VariableNames', {'Frequency', 'SpectrumData'});
        end

        % Append computed results to the frame table.
        frame = [frame, ...
            table({Case_ps},'VariableNames',{'Case_ps'})];

        %% PowerSpectrum
        try
            % Get units to use in computed spectrum.
            tuReal = "seconds";
            tuTime = tuReal;

            % Compute effective sampling rate.
            tNumeric = time2num(Case.TIME,tuReal);
            [Fs,irregular] = effectivefs(tNumeric);
            Ts = 1/Fs;

            % Resample non-uniform signals.
            x_raw = Case.P4;
            if irregular
                x = resample(x_raw,tNumeric,Fs,'linear');
            else
                x = x_raw;
            end

            % Compute the autoregressive model.
            data = iddata(x,[],Ts,'TimeUnit',tuTime,'OutputName','SpectrumData');
            arOpt = arOptions('Approach','fb','Window','now','EstimateCovariance',false);
            model = ar(data,10,arOpt);

            % Compute the power spectrum.
            [ps,w] = spectrum(model);
            ps = reshape(ps, numel(ps), 1);

            % Convert frequency unit.
            factor = funitconv('rad/TimeUnit', 'Hz', 'seconds');
            w = factor*w;
            Fs = 2*pi*factor*Fs;

            % Remove frequencies above Nyquist frequency.
            I = w<=(Fs/2+1e4*eps);
            w = w(I);
            ps = ps(I);

            % Configure the computed spectrum.
            ps = table(w, ps, 'VariableNames', {'Frequency', 'SpectrumData'});
            ps.Properties.VariableUnits = {'Hz', ''};
            ps = addprop(ps, {'SampleFrequency'}, {'table'});
            ps.Properties.CustomProperties.SampleFrequency = Fs;
            Case_ps_3 = ps;
        catch
            Case_ps_3 = table(NaN, NaN, 'VariableNames', {'Frequency', 'SpectrumData'});
        end

        % Append computed results to the frame table.
        frame = [frame, ...
            table({Case_ps_3},'VariableNames',{'Case_ps_3'})];

        %% PowerSpectrum
        try
            % Get units to use in computed spectrum.
            tuReal = "seconds";
            tuTime = tuReal;

            % Compute effective sampling rate.
            tNumeric = time2num(Case.TIME,tuReal);
            [Fs,irregular] = effectivefs(tNumeric);
            Ts = 1/Fs;

            % Resample non-uniform signals.
            x_raw = Case.P7;
            if irregular
                x = resample(x_raw,tNumeric,Fs,'linear');
            else
                x = x_raw;
            end

            % Compute the autoregressive model.
            data = iddata(x,[],Ts,'TimeUnit',tuTime,'OutputName','SpectrumData');
            arOpt = arOptions('Approach','fb','Window','now','EstimateCovariance',false);
            model = ar(data,10,arOpt);

            % Compute the power spectrum.
            [ps,w] = spectrum(model);
            ps = reshape(ps, numel(ps), 1);

            % Convert frequency unit.
            factor = funitconv('rad/TimeUnit', 'Hz', 'seconds');
            w = factor*w;
            Fs = 2*pi*factor*Fs;

            % Remove frequencies above Nyquist frequency.
            I = w<=(Fs/2+1e4*eps);
            w = w(I);
            ps = ps(I);

            % Configure the computed spectrum.
            ps = table(w, ps, 'VariableNames', {'Frequency', 'SpectrumData'});
            ps.Properties.VariableUnits = {'Hz', ''};
            ps = addprop(ps, {'SampleFrequency'}, {'table'});
            ps.Properties.CustomProperties.SampleFrequency = Fs;
            Case_ps_7 = ps;
        catch
            Case_ps_7 = table(NaN, NaN, 'VariableNames', {'Frequency', 'SpectrumData'});
        end

        % Append computed results to the frame table.
        frame = [frame, ...
            table({Case_ps_7},'VariableNames',{'Case_ps_7'})];

        %% SpectrumFeatures
        try
            % Compute spectral features.
            % Get frequency unit conversion factor.
            factor = funitconv('Hz', 'rad/TimeUnit', 'seconds');
            ps = Case_ps.SpectrumData;
            w = Case_ps.Frequency;
            w = factor*w;
            mask_1 = (w>=factor*1) & (w<=factor*300);
            ps = ps(mask_1);
            w = w(mask_1);

            % Compute spectral peaks.
            [peakAmp,peakFreq] = findpeaks(ps,w/factor,'MinPeakHeight',-Inf, ...
                'MinPeakProminence',0,'MinPeakDistance',0.001,'SortStr','descend','NPeaks',2);
            peakAmp = [peakAmp(:); NaN(2-numel(peakAmp),1)];
            peakFreq = [peakFreq(:); NaN(2-numel(peakFreq),1)];

            % Extract individual feature values.
            PeakAmp2 = peakAmp(2);

            % Concatenate signal features.
            featureValues = PeakAmp2;

            % Package computed features into a table.
            featureNames = {'PeakAmp2'};
            Case_ps_spec = array2table(featureValues,'VariableNames',featureNames);
        catch
            % Package computed features into a table.
            featureValues = NaN(1,1);
            featureNames = {'PeakAmp2'};
            Case_ps_spec = array2table(featureValues,'VariableNames',featureNames);
        end

        % Append computed results to the frame table.
        frame = [frame, ...
            table({Case_ps_spec},'VariableNames',{'Case_ps_spec'})];

        %% SpectrumFeatures
        try
            % Compute spectral features.
            % Get frequency unit conversion factor.
            factor = funitconv('Hz', 'rad/TimeUnit', 'seconds');
            ps = Case_ps_3.SpectrumData;
            w = Case_ps_3.Frequency;
            w = factor*w;
            mask_1 = (w>=factor*1) & (w<=factor*300);
            ps = ps(mask_1);
            w = w(mask_1);

            % Compute spectral peaks.
            [peakAmp,peakFreq] = findpeaks(ps,w/factor,'MinPeakHeight',-Inf, ...
                'MinPeakProminence',0,'MinPeakDistance',0.001,'SortStr','descend','NPeaks',2);
            peakAmp = [peakAmp(:); NaN(2-numel(peakAmp),1)];
            peakFreq = [peakFreq(:); NaN(2-numel(peakFreq),1)];

            % Extract individual feature values.
            PeakAmp2 = peakAmp(2);

            % Concatenate signal features.
            featureValues = PeakAmp2;

            % Package computed features into a table.
            featureNames = {'PeakAmp2'};
            Case_ps_3_spec = array2table(featureValues,'VariableNames',featureNames);
        catch
            % Package computed features into a table.
            featureValues = NaN(1,1);
            featureNames = {'PeakAmp2'};
            Case_ps_3_spec = array2table(featureValues,'VariableNames',featureNames);
        end

        % Append computed results to the frame table.
        frame = [frame, ...
            table({Case_ps_3_spec},'VariableNames',{'Case_ps_3_spec'})];

        %% SpectrumFeatures
        try
            % Compute spectral features.
            % Get frequency unit conversion factor.
            factor = funitconv('Hz', 'rad/TimeUnit', 'seconds');
            ps = Case_ps_7.SpectrumData;
            w = Case_ps_7.Frequency;
            w = factor*w;
            mask_1 = (w>=factor*1) & (w<=factor*300);
            ps = ps(mask_1);
            w = w(mask_1);

            % Compute spectral peaks.
            [peakAmp,peakFreq] = findpeaks(ps,w/factor,'MinPeakHeight',-Inf, ...
                'MinPeakProminence',0,'MinPeakDistance',0.001,'SortStr','descend','NPeaks',2);
            peakAmp = [peakAmp(:); NaN(2-numel(peakAmp),1)];
            peakFreq = [peakFreq(:); NaN(2-numel(peakFreq),1)];

            % Extract individual feature values.
            PeakAmp2 = peakAmp(2);

            % Concatenate signal features.
            featureValues = PeakAmp2;

            % Package computed features into a table.
            featureNames = {'PeakAmp2'};
            Case_ps_7_spec = array2table(featureValues,'VariableNames',featureNames);
        catch
            % Package computed features into a table.
            featureValues = NaN(1,1);
            featureNames = {'PeakAmp2'};
            Case_ps_7_spec = array2table(featureValues,'VariableNames',featureNames);
        end

        % Append computed results to the frame table.
        frame = [frame, ...
            table({Case_ps_7_spec},'VariableNames',{'Case_ps_7_spec'})];

        %% SignalFeatures
        try
            % Compute signal features.
            inputSignal = Case.P1;
            Kurtosis = kurtosis(inputSignal);
            PeakValue = max(abs(inputSignal));
            SINAD = sinad(inputSignal);

            % Concatenate signal features.
            featureValues = [Kurtosis,PeakValue,SINAD];

            % Package computed features into a table.
            featureNames = {'Kurtosis','PeakValue','SINAD'};
            Case_sigstats = array2table(featureValues,'VariableNames',featureNames);
        catch
            % Package computed features into a table.
            featureValues = NaN(1,3);
            featureNames = {'Kurtosis','PeakValue','SINAD'};
            Case_sigstats = array2table(featureValues,'VariableNames',featureNames);
        end

        % Append computed results to the frame table.
        frame = [frame, ...
            table({Case_sigstats},'VariableNames',{'Case_sigstats'})];

        %% SignalFeatures
        try
            % Compute signal features.
            inputSignal = Case.P2;
            Kurtosis = kurtosis(inputSignal);
            PeakValue = max(abs(inputSignal));
            SINAD = sinad(inputSignal);

            % Concatenate signal features.
            featureValues = [Kurtosis,PeakValue,SINAD];

            % Package computed features into a table.
            featureNames = {'Kurtosis','PeakValue','SINAD'};
            Case_sigstats_1 = array2table(featureValues,'VariableNames',featureNames);
        catch
            % Package computed features into a table.
            featureValues = NaN(1,3);
            featureNames = {'Kurtosis','PeakValue','SINAD'};
            Case_sigstats_1 = array2table(featureValues,'VariableNames',featureNames);
        end

        % Append computed results to the frame table.
        frame = [frame, ...
            table({Case_sigstats_1},'VariableNames',{'Case_sigstats_1'})];

        %% SignalFeatures
        try
            % Compute signal features.
            inputSignal = Case.P3;
            Kurtosis = kurtosis(inputSignal);
            PeakValue = max(abs(inputSignal));

            % Concatenate signal features.
            featureValues = [Kurtosis,PeakValue];

            % Package computed features into a table.
            featureNames = {'Kurtosis','PeakValue'};
            Case_sigstats_2 = array2table(featureValues,'VariableNames',featureNames);
        catch
            % Package computed features into a table.
            featureValues = NaN(1,2);
            featureNames = {'Kurtosis','PeakValue'};
            Case_sigstats_2 = array2table(featureValues,'VariableNames',featureNames);
        end

        % Append computed results to the frame table.
        frame = [frame, ...
            table({Case_sigstats_2},'VariableNames',{'Case_sigstats_2'})];

        %% SignalFeatures
        try
            % Compute signal features.
            inputSignal = Case.P4;
            PeakValue = max(abs(inputSignal));

            % Concatenate signal features.
            featureValues = PeakValue;

            % Package computed features into a table.
            featureNames = {'PeakValue'};
            Case_sigstats_3 = array2table(featureValues,'VariableNames',featureNames);
        catch
            % Package computed features into a table.
            featureValues = NaN(1,1);
            featureNames = {'PeakValue'};
            Case_sigstats_3 = array2table(featureValues,'VariableNames',featureNames);
        end

        % Append computed results to the frame table.
        frame = [frame, ...
            table({Case_sigstats_3},'VariableNames',{'Case_sigstats_3'})];

        %% SignalFeatures
        try
            % Compute signal features.
            inputSignal = Case.P5;
            Kurtosis = kurtosis(inputSignal);
            PeakValue = max(abs(inputSignal));
            SINAD = sinad(inputSignal);

            % Concatenate signal features.
            featureValues = [Kurtosis,PeakValue,SINAD];

            % Package computed features into a table.
            featureNames = {'Kurtosis','PeakValue','SINAD'};
            Case_sigstats_4 = array2table(featureValues,'VariableNames',featureNames);
        catch
            % Package computed features into a table.
            featureValues = NaN(1,3);
            featureNames = {'Kurtosis','PeakValue','SINAD'};
            Case_sigstats_4 = array2table(featureValues,'VariableNames',featureNames);
        end

        % Append computed results to the frame table.
        frame = [frame, ...
            table({Case_sigstats_4},'VariableNames',{'Case_sigstats_4'})];

        %% SignalFeatures
        try
            % Compute signal features.
            inputSignal = Case.P6;
            PeakValue = max(abs(inputSignal));

            % Concatenate signal features.
            featureValues = PeakValue;

            % Package computed features into a table.
            featureNames = {'PeakValue'};
            Case_sigstats_5 = array2table(featureValues,'VariableNames',featureNames);
        catch
            % Package computed features into a table.
            featureValues = NaN(1,1);
            featureNames = {'PeakValue'};
            Case_sigstats_5 = array2table(featureValues,'VariableNames',featureNames);
        end

        % Append computed results to the frame table.
        frame = [frame, ...
            table({Case_sigstats_5},'VariableNames',{'Case_sigstats_5'})];

        %% SignalFeatures
        try
            % Compute signal features.
            inputSignal = Case.P7;
            PeakValue = max(abs(inputSignal));

            % Concatenate signal features.
            featureValues = PeakValue;

            % Package computed features into a table.
            featureNames = {'PeakValue'};
            Case_sigstats_6 = array2table(featureValues,'VariableNames',featureNames);
        catch
            % Package computed features into a table.
            featureValues = NaN(1,1);
            featureNames = {'PeakValue'};
            Case_sigstats_6 = array2table(featureValues,'VariableNames',featureNames);
        end

        % Append computed results to the frame table.
        frame = [frame, ...
            table({Case_sigstats_6},'VariableNames',{'Case_sigstats_6'})];

        %% Concatenate frames.
        frames = [frames;frame]; %#ok<*AGROW>
    end

    % Write all the results for the current member to the ensemble.
    memberResult = table({frames},'VariableNames',"FRM_1");
    writeToLastMemberRead(outputEnsemble,memberResult)
end

% Gather all features into a table.
selectedFeatureNames = ["FRM_1/Case_ps_spec/PeakAmp2","FRM_1/Case_ps_3_spec/PeakAmp2","FRM_1/Case_ps_7_spec/PeakAmp2","FRM_1/Case_sigstats/Kurtosis","FRM_1/Case_sigstats/PeakValue","FRM_1/Case_sigstats/SINAD","FRM_1/Case_sigstats_1/Kurtosis","FRM_1/Case_sigstats_1/PeakValue","FRM_1/Case_sigstats_1/SINAD","FRM_1/Case_sigstats_2/Kurtosis","FRM_1/Case_sigstats_2/PeakValue","FRM_1/Case_sigstats_3/PeakValue","FRM_1/Case_sigstats_4/Kurtosis","FRM_1/Case_sigstats_4/PeakValue","FRM_1/Case_sigstats_4/SINAD","FRM_1/Case_sigstats_5/PeakValue","FRM_1/Case_sigstats_6/PeakValue"];
featureTable = readFeatureTable(outputEnsemble,"FRM_1",'Features',selectedFeatureNames,'ConditionVariables',outputEnsemble.ConditionVariables,'IncludeMemberID',true);

% Set SelectedVariables to select variables to read from the ensemble.
outputEnsemble.SelectedVariables = unique([outputEnsemble.DataVariables;outputEnsemble.ConditionVariables;outputEnsemble.IndependentVariables],'stable');

% Gather results into a table.
outputTable = readall(outputEnsemble);
end
